// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Chord.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <iostream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mp2;

class ChordHandler : virtual public ChordIf {
 public:

  ChordHandler() {
    // Your initialization goes here  
    std::cout << "I'm a little teapot" << std::endl;

  }

  void add_node() {
    // Your implementation goes here
    printf("add_node\n");
  }

  void add_file() {
    // Your implementation goes here
    printf("add_file\n");
  }

  void del_file() {
    // Your implementation goes here
    printf("del_file\n");
  }

  void get_file() {
    // Your implementation goes here
    printf("get_file\n");
  }

  void get_table() {
    // Your implementation goes here
    printf("get_table\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ChordHandler> handler(new ChordHandler());
  shared_ptr<TProcessor> processor(new ChordProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
