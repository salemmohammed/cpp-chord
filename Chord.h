/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Chord_H
#define Chord_H

#include <TProcessor.h>
#include "mp2_types.h"

namespace mp2 {

class ChordIf {
 public:
  virtual ~ChordIf() {}
  virtual void add_node() = 0;
  virtual void add_file() = 0;
  virtual void del_file() = 0;
  virtual void get_file() = 0;
  virtual void get_table() = 0;
};

class ChordIfFactory {
 public:
  typedef ChordIf Handler;

  virtual ~ChordIfFactory() {}

  virtual ChordIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChordIf* /* handler */) = 0;
};

class ChordIfSingletonFactory : virtual public ChordIfFactory {
 public:
  ChordIfSingletonFactory(const boost::shared_ptr<ChordIf>& iface) : iface_(iface) {}
  virtual ~ChordIfSingletonFactory() {}

  virtual ChordIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChordIf* /* handler */) {}

 protected:
  boost::shared_ptr<ChordIf> iface_;
};

class ChordNull : virtual public ChordIf {
 public:
  virtual ~ChordNull() {}
  void add_node() {
    return;
  }
  void add_file() {
    return;
  }
  void del_file() {
    return;
  }
  void get_file() {
    return;
  }
  void get_table() {
    return;
  }
};


class Chord_add_node_args {
 public:

  Chord_add_node_args() {
  }

  virtual ~Chord_add_node_args() throw() {}


  bool operator == (const Chord_add_node_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_add_node_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_add_node_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_add_node_pargs {
 public:


  virtual ~Chord_add_node_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_add_node_result {
 public:

  Chord_add_node_result() {
  }

  virtual ~Chord_add_node_result() throw() {}


  bool operator == (const Chord_add_node_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_add_node_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_add_node_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_add_node_presult {
 public:


  virtual ~Chord_add_node_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Chord_add_file_args {
 public:

  Chord_add_file_args() {
  }

  virtual ~Chord_add_file_args() throw() {}


  bool operator == (const Chord_add_file_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_add_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_add_file_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_add_file_pargs {
 public:


  virtual ~Chord_add_file_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_add_file_result {
 public:

  Chord_add_file_result() {
  }

  virtual ~Chord_add_file_result() throw() {}


  bool operator == (const Chord_add_file_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_add_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_add_file_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_add_file_presult {
 public:


  virtual ~Chord_add_file_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Chord_del_file_args {
 public:

  Chord_del_file_args() {
  }

  virtual ~Chord_del_file_args() throw() {}


  bool operator == (const Chord_del_file_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_del_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_del_file_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_del_file_pargs {
 public:


  virtual ~Chord_del_file_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_del_file_result {
 public:

  Chord_del_file_result() {
  }

  virtual ~Chord_del_file_result() throw() {}


  bool operator == (const Chord_del_file_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_del_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_del_file_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_del_file_presult {
 public:


  virtual ~Chord_del_file_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Chord_get_file_args {
 public:

  Chord_get_file_args() {
  }

  virtual ~Chord_get_file_args() throw() {}


  bool operator == (const Chord_get_file_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_get_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_get_file_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_get_file_pargs {
 public:


  virtual ~Chord_get_file_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_get_file_result {
 public:

  Chord_get_file_result() {
  }

  virtual ~Chord_get_file_result() throw() {}


  bool operator == (const Chord_get_file_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_get_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_get_file_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_get_file_presult {
 public:


  virtual ~Chord_get_file_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Chord_get_table_args {
 public:

  Chord_get_table_args() {
  }

  virtual ~Chord_get_table_args() throw() {}


  bool operator == (const Chord_get_table_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_get_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_get_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_get_table_pargs {
 public:


  virtual ~Chord_get_table_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_get_table_result {
 public:

  Chord_get_table_result() {
  }

  virtual ~Chord_get_table_result() throw() {}


  bool operator == (const Chord_get_table_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Chord_get_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chord_get_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Chord_get_table_presult {
 public:


  virtual ~Chord_get_table_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChordClient : virtual public ChordIf {
 public:
  ChordClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ChordClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add_node();
  void send_add_node();
  void recv_add_node();
  void add_file();
  void send_add_file();
  void recv_add_file();
  void del_file();
  void send_del_file();
  void recv_del_file();
  void get_file();
  void send_get_file();
  void recv_get_file();
  void get_table();
  void send_get_table();
  void recv_get_table();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChordProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ChordIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ChordProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_add_node(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_file(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_file(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_file(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChordProcessor(boost::shared_ptr<ChordIf> iface) :
    iface_(iface) {
    processMap_["add_node"] = &ChordProcessor::process_add_node;
    processMap_["add_file"] = &ChordProcessor::process_add_file;
    processMap_["del_file"] = &ChordProcessor::process_del_file;
    processMap_["get_file"] = &ChordProcessor::process_get_file;
    processMap_["get_table"] = &ChordProcessor::process_get_table;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ChordProcessor() {}
};

class ChordProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChordProcessorFactory(const ::boost::shared_ptr< ChordIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ChordIfFactory > handlerFactory_;
};

class ChordMultiface : virtual public ChordIf {
 public:
  ChordMultiface(std::vector<boost::shared_ptr<ChordIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChordMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ChordIf> > ifaces_;
  ChordMultiface() {}
  void add(boost::shared_ptr<ChordIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add_node() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->add_node();
    }
  }

  void add_file() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->add_file();
    }
  }

  void del_file() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->del_file();
    }
  }

  void get_file() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->get_file();
    }
  }

  void get_table() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->get_table();
    }
  }

};

} // namespace

#endif
