// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Chord.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mp2;

class ChordHandler : virtual public ChordIf {
 public:
  ChordHandler() {
    // Your initialization goes here
  }

  void add_node() {
    // Your implementation goes here
    printf("add_node\n");
  }

  void add_file(key_and_node& _return, const std::string& filename, const std::string& data) {
    // Your implementation goes here
    printf("add_file\n");
  }

  void del_file(key_and_node& _return, const std::string& filename) {
    // Your implementation goes here
    printf("del_file\n");
  }

  void get_table() {
    // Your implementation goes here
    printf("get_table\n");
  }

  void get_file(const int32_t key, const std::string& data) {
    // Your implementation goes here
    printf("get_file\n");
  }

  void get_successor(successor& _return) {
    // Your implementation goes here
    printf("get_successor\n");
  }

  void join_network(successor& _return, const int32_t pid) {
    // Your implementation goes here
    printf("join_network\n");
  }

  void current_pred(predecessor& _return) {
    // Your implementation goes here
    printf("current_pred\n");
  }

  void notify(const int32_t pid, const int32_t new_port) {
    // Your implementation goes here
    printf("notify\n");
  }

  void find_successor(successor& _return, const int32_t pid) {
    // Your implementation goes here
    printf("find_successor\n");
  }

  void find_predecessor(neighbor& _return, const int32_t pid) {
    // Your implementation goes here
    printf("find_predecessor\n");
  }

  void closest_preceding_finger(neighbor& _return, const int32_t pid) {
    // Your implementation goes here
    printf("closest_preceding_finger\n");
  }

  void get_info(neighbor& _return) {
    // Your implementation goes here
    printf("get_info\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ChordHandler> handler(new ChordHandler());
  shared_ptr<TProcessor> processor(new ChordProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

