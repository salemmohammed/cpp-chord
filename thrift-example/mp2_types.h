/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mp2_TYPES_H
#define mp2_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace mp2 {

typedef struct _MyObject__isset {
  _MyObject__isset() : i(false), s(false), d(false) {}
  bool i;
  bool s;
  bool d;
} _MyObject__isset;

class MyObject {
 public:

  static const char* ascii_fingerprint; // = "6A3D2373194374708487046795BFE36B";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x3D,0x23,0x73,0x19,0x43,0x74,0x70,0x84,0x87,0x04,0x67,0x95,0xBF,0xE3,0x6B};

  MyObject() : i(0), s(""), d(0) {
  }

  virtual ~MyObject() throw() {}

  int32_t i;
  std::string s;
  double d;

  _MyObject__isset __isset;

  void __set_i(const int32_t val) {
    i = val;
  }

  void __set_s(const std::string& val) {
    s = val;
  }

  void __set_d(const double val) {
    d = val;
  }

  bool operator == (const MyObject & rhs) const
  {
    if (!(i == rhs.i))
      return false;
    if (!(s == rhs.s))
      return false;
    if (!(d == rhs.d))
      return false;
    return true;
  }
  bool operator != (const MyObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
