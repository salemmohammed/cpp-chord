/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mp2_TYPES_H
#define mp2_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace mp2 {

typedef struct _node__isset {
  _node__isset() : my_m(false), my_id(false), my_port(false), introducer_port(false) {}
  bool my_m;
  bool my_id;
  bool my_port;
  bool introducer_port;
} _node__isset;

class node {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

  node() : my_m(0), my_id(0), my_port(0), introducer_port(0) {
  }

  virtual ~node() throw() {}

  int32_t my_m;
  int32_t my_id;
  int32_t my_port;
  int32_t introducer_port;

  _node__isset __isset;

  void __set_my_m(const int32_t val) {
    my_m = val;
  }

  void __set_my_id(const int32_t val) {
    my_id = val;
  }

  void __set_my_port(const int32_t val) {
    my_port = val;
  }

  void __set_introducer_port(const int32_t val) {
    introducer_port = val;
  }

  bool operator == (const node & rhs) const
  {
    if (!(my_m == rhs.my_m))
      return false;
    if (!(my_id == rhs.my_id))
      return false;
    if (!(my_port == rhs.my_port))
      return false;
    if (!(introducer_port == rhs.introducer_port))
      return false;
    return true;
  }
  bool operator != (const node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
